#+TITLE: Despliegue api rest laravel 10
#+AUTHOR:
#+EMAIL:
#+DATE:
#+OPTIONS: texht:t toc:2 num:2 -:nil ^:{} ":nil ':nil
#+OPTIONS: tex:t
#+LATEX_CLASS: article
#+LATEX_HEADER:
#+LANGUAGE: es

#+BEGIN_COMMENT
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+END_COMMENT

#+LATEX_HEADER: \renewcommand{\contentsname}{Tabla de contenidos}

#+LATEX_HEADER_EXTRA: \usepackage{mdframed}
#+LATEX_HEADER_EXTRA: \BeforeBeginEnvironment{minted}{\begin{mdframed}}
#+LATEX_HEADER_EXTRA: \AfterEndEnvironment{minted}{\end{mdframed}}

#+LATEX: \setlength\parindent{10pt}
#+LATEX_HEADER: \usepackage{parskip}

#+latex_header: \usepackage[utf8]{inputenc} %% For unicode chars
#+LATEX_HEADER: \usepackage{placeins}

#+LATEX_HEADER: \usepackage[margin=2.50cm]{geometry}

#+LaTeX_HEADER: \usepackage[T1]{fontenc}
#+LaTeX_HEADER: \usepackage{mathpazo}
#+LaTeX_HEADER: \linespread{1.05}
#+LaTeX_HEADER: \usepackage[scaled]{helvet}
#+LaTeX_HEADER: \usepackage{courier}

#+LaTeX_HEADER: \hypersetup{colorlinks=true,linkcolor=blue}
#+LATEX_HEADER: \RequirePackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\small,formatcom = {\color[rgb]{0.5,0,0}}}

* Despliegue de API REST en Laravel 10 con Sail en Producci칩n

Vamos a desplegar tu API REST en Laravel 10 con Docker y Sail en un
servidor de producci칩n. Te explicar칠 cada paso detalladamente.

** Configuraci칩n del Servidor

Necesitas un VPS o servidor dedicado con un sistema operativo Linux
(ej. Ubuntu 22.04). Lo primero es actualizarlo y preparar el entorno.

*** 游댳 En el Servidor (host)
Con칠ctate v칤a SSH:

#+BEGIN_SRC sh
ssh usuario@tu-servidor
#+END_SRC

Actualiza el sistema:

#+BEGIN_SRC sh
sudo apt update && sudo apt upgrade -y
#+END_SRC

Instala los paquetes b치sicos:

#+BEGIN_SRC sh
sudo apt install -y curl git unzip ufw
#+END_SRC

** Instalar Docker y Docker Compose

Sail funciona sobre Docker, as칤 que necesitas instalarlo en el
servidor.

*** 游댳 En el Servidor (host)
Ejecuta:

#+BEGIN_SRC sh
sudo apt install -y docker.io docker-compose
sudo systemctl enable --now docker
#+END_SRC

Verifica que Docker funciona:

#+BEGIN_SRC sh
docker --version
docker-compose --version
#+END_SRC

A침ade tu usuario al grupo Docker (opcional, para no usar `sudo` en
cada comando):

#+BEGIN_SRC sh
sudo usermod -aG docker $(whoami)
#+END_SRC

**(Sal de la sesi칩n y vuelve a entrar para que surta efecto)**

** Subir el C칩digo de la API

Tienes dos opciones: subir el c칩digo desde tu m치quina o clonar el
repositorio en el servidor.

*** 游댳 Opci칩n 1: Subir desde tu m치quina
En tu m치quina local:

#+BEGIN_SRC sh
scp -r tu-api usuario@tu-servidor:/var/www/
#+END_SRC

*** 游댳 Opci칩n 2: Clonar directamente en el servidor
En el servidor:

#+BEGIN_SRC sh
cd /var/www/
git clone https://github.com/tu-usuario/tu-api.git
#+END_SRC

Aseg칰rate de que los permisos sean correctos:

#+BEGIN_SRC sh
sudo chown -R $USER:www-data /var/www/tu-api
sudo chmod -R 775 /var/www/tu-api
#+END_SRC

** Configurar Laravel y Entorno

*** 游댳 Dentro del Proyecto en el Servidor
Accede a la carpeta del proyecto:

#+BEGIN_SRC sh
cd /var/www/tu-api
#+END_SRC

Copia el archivo de entorno y ed칤talo:

#+BEGIN_SRC sh
cp .env.example .env
nano .env
#+END_SRC

Cambia las siguientes variables:

#+BEGIN_SRC env
APP_ENV=production
APP_DEBUG=false
APP_URL=https://tu-dominio.com

DB_CONNECTION=mysql
DB_HOST=mysql
DB_PORT=3306
DB_DATABASE=nombre_bd
DB_USERNAME=usuario_bd
DB_PASSWORD=clave_secreta
#+END_SRC

** Configurar Sail para Producci칩n

**(En `/var/www/tu-api` en el servidor)**

Levanta los contenedores:

#+BEGIN_SRC sh
./vendor/bin/sail up -d
#+END_SRC

Ejecuta las migraciones:

#+BEGIN_SRC sh
./vendor/bin/sail artisan migrate --force
#+END_SRC

Genera la clave de la aplicaci칩n:

#+BEGIN_SRC sh
./vendor/bin/sail artisan key:generate
#+END_SRC

** Optimizaci칩n de Laravel

Dentro del contenedor de Laravel:

#+BEGIN_SRC sh
./vendor/bin/sail artisan config:cache
./vendor/bin/sail artisan route:cache
./vendor/bin/sail artisan view:cache
#+END_SRC

** Configurar Nginx como Proxy Reverso

Sail ya tiene Nginx dentro del contenedor, pero necesitas un **proxy
inverso** para que la API sea accesible desde el exterior.

*** 游댳 En el Servidor (host)
Instala Nginx:

#+BEGIN_SRC sh
sudo apt install -y nginx
#+END_SRC

Crea una configuraci칩n para Laravel:

#+BEGIN_SRC sh
sudo nano /etc/nginx/sites-available/tu-api
#+END_SRC

Pega este contenido:

#+BEGIN_SRC nginx
server {
    listen 80;
    server_name tu-dominio.com;

    location / {
        proxy_pass http://127.0.0.1:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
#+END_SRC

Activa el sitio y reinicia Nginx:

#+BEGIN_SRC sh
sudo ln -s /etc/nginx/sites-available/tu-api /etc/nginx/sites-enabled/
sudo systemctl restart nginx
#+END_SRC

** Configurar HTTPS con Let's Encrypt

Ejecuta:

#+BEGIN_SRC sh
sudo apt install certbot python3-certbot-nginx
sudo certbot --nginx -d tu-dominio.com
#+END_SRC

Esto generar치 y configurar치 autom치ticamente el certificado SSL.

** Configurar Supervisor para las Colas (Opcional)

Si tu aplicaci칩n usa colas, instala `supervisor` y config칰ralo.

*** 游댳 En el Servidor (host)
#+BEGIN_SRC sh
sudo apt install -y supervisor
#+END_SRC

Crea el archivo:

#+BEGIN_SRC sh
sudo nano /etc/supervisor/conf.d/laravel-worker.conf
#+END_SRC

Agrega esto:

#+BEGIN_SRC ini
[program:laravel-worker]
process_name=%(program_name)s_%(process_num)02d
command=docker exec -i tu-api-app sail artisan queue:work --tries=3
autostart=true
autorestart=true
numprocs=1
redirect_stderr=true
stdout_logfile=/var/log/laravel-worker.log
#+END_SRC

Carga la configuraci칩n:

#+BEGIN_SRC sh
sudo supervisorctl reread
sudo supervisorctl update
sudo supervisorctl start laravel-worker
#+END_SRC

** Seguridad y Firewall

Habilita el firewall y solo permite SSH, HTTP y HTTPS:

#+BEGIN_SRC sh
sudo ufw allow OpenSSH
sudo ufw allow 80
sudo ufw allow 443
sudo ufw enable
#+END_SRC

** 칔ltimos Pasos y Pruebas

*** 游댳 En el Servidor (host)
Verifica que todo est치 corriendo:

#+BEGIN_SRC sh
docker ps
#+END_SRC

Si ves los contenedores en ejecuci칩n, 춰vas bien!

Prueba que la API responde:

#+BEGIN_SRC sh
curl -I https://tu-dominio.com/api/endpoint
#+END_SRC

Si necesitas ver logs:

#+BEGIN_SRC sh
./vendor/bin/sail artisan logs
#+END_SRC

** Resumen Final
- **Servidor**: Instalamos Docker, Docker Compose y Nginx.
- **Proyecto**: Subimos Laravel y configuramos `.env`.
- **Sail**: Levantamos los contenedores (`sail up -d`).
- **Nginx**: Configuramos un proxy inverso.
- **SSL**: Instalamos Let's Encrypt.
- **Supervisor**: Configuramos workers si usamos colas.
- **Seguridad**: Configuramos firewall y permisos.

**춰Tu API REST en Laravel 10 con Sail ya est치 en producci칩n!**
